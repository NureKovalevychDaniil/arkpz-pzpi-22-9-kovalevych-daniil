МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ


ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмна інженерія»



ЗВІТ
до лабораторної работи №3 з дисципліни
«Аналіз та рефакторинг коду»




Виконав:	Перевірив:
ст. гр. ПЗПІ-22-9	Ст. викл. кафедри ПІ
Ковалевич Данііл Ігорович	Сокорчук Ігор Петрович

















Харків 2024
Мета роботи: Розробити бізнес-логіку та функції адміністрування серверної частини програмної системи для управління транспортними засобами.
Завдання:
•	Розробити бізнес-логіку серверної частини програмної системи.
•	Розробити функції адміністрування серверної частини програмної системи.
•	Створити програмну реалізацію бізнес-логіки та функцій адміністрування серверної частини.
•	Перевірити роботу серверної частини системи.
•	Завантажити програмний код у GitHub репозиторій у гілку main.
•	Створити відеозапис демонстрації функціональності серверної частини та завантажити його на YouTube.
•	Створити хронологічний опис демонстрації та додати до опису відео.
•	Створити звіт до лабораторної роботи.
•	Експортувати звіт у формат PDF та завантажити на платформу dl.nure.ua.
•	Експортувати звіт у текстовий файл з кодуванням UTF-8 та завантажити його у GitHub.
Опис інженерних рішень:
1.	Архітектура серверної частини Серверна частина побудована на основі Node.js з використанням SQLite для зберігання даних. Архітектура системи включає такі модулі:
•	controllers/: логіка обробки запитів (бізнес-логіка та адміністрування).
•	routes/: маршрутизація запитів API.
•	db/: база даних SQLite для зберігання інформації про транспортні засоби, сенсорні дані та користувачів.
•	middleware/: перевірка авторизації та ролей користувачів.
2.	Бізнес-логіка
•	Моніторинг транспортних засобів: обробка сенсорних даних транспортних засобів, таких як рівень масла та температура двигуна.
•	Автоматизація технічного обслуговування (ТО): автоматичне створення записів про необхідність ТО при виявленні критичних показників сенсорів.
•	Аналітика: отримання зведеної інформації про кількість транспортних засобів, середні значення сенсорних показників та статистика технічного обслуговування.
3.	Функції адміністрування
•	Управління користувачами: реалізовано CRUD-функції для додавання, редагування, видалення та перегляду користувачів.
•	Рольова модель доступу (RBAC): перевірка ролей користувачів (admin, manager, user) для обмеження доступу до певних функцій системи.
4.	Захист даних та безпека
•	Використано авторизацію через заголовок Authorization.
•	Додано перевірку ролей для захисту критичних функцій системи (наприклад, видалення користувачів доступне лише адміністраторам).
5.	Масштабованість
•	Система розроблена з можливістю додавання нових функцій без зміни основної архітектури.
•	Використання модульної структури дозволяє легко інтегрувати додаткові сервіси та розширення.

Специфікація API

1. Обробка сенсорних даних
•	Отримати сенсорні дані для транспортного засобу 
Метод: GET
Маршрут: /sensors/{vehicle_id}
Доступ: admin, manager, user
Приклад відповіді: 
[
  {
    "sensor_type": "oil_level",
    "value": 45.5,
    "timestamp": "2025-02-04 12:30:00"
  },
  {
    "sensor_type": "engine_temp",
    "value": 85.0,
    "timestamp": "2025-02-04 12:30:00"
  }
]
2. Управління користувачами
•	Отримати список користувачів
Метод: GET
Маршрут: /admin/users
Доступ: admin
Приклад відповіді: 
[
  {
    "id": 1,
    "username": "admin_user",
    "role": "admin"
  },
  {
    "id": 2,
    "username": "manager_user",
    "role": "manager"
  }
]
•	Додати нового користувача
Метод: POST
Маршрут: /admin/users
Доступ: admin
Тіло запиту: 
{
  "username": "new_user",
  "password": "password123",
  "role": "user"
}
Приклад відповіді: 
{
  "message": "User added successfully"
}
•	Видалити користувача
Метод: DELETE
Маршрут: /admin/users/{id}
Доступ: admin
Приклад відповіді: 
{
  "message": "User deleted successfully"
}
3. Технічне обслуговування (ТО)
•	Перевірити потребу в технічному обслуговуванні
Метод: GET
Маршрут: /admin/maintenance/check/{vehicle_id}
Доступ: admin, manager
Приклад відповіді (коли ТО потрібне): 
{
  "message": "Maintenance scheduled",
  "tasks": [
    {
      "vehicle_id": 1,
      "description": "Low oil level detected"
    },
    {
      "vehicle_id": 1,
      "description": "High engine temperature detected"
    }
  ]
}
•	Завершити технічне обслуговування
Метод: PUT
Маршрут: /admin/maintenance/complete/{maintenance_id}
Доступ: admin, manager
Приклад відповіді: 
{
  "message": "Maintenance completed successfully"
}
4. Аналітика
•	Отримати загальну кількість транспортних засобів
Метод: GET
Маршрут: /admin/analytics/vehicles
Доступ: admin, manager
Приклад відповіді: 
{
  "totalVehicles": 5
}
•	Отримати середні значення сенсорних показників
Метод: GET
Маршрут: /admin/analytics/sensors
Доступ: admin, manager
Приклад відповіді: 
{
  "oil_level": "45.67",
  "engine_temp": "88.23"
}
•	Отримати статистику технічного обслуговування
Метод: GET
Маршрут: /admin/analytics/maintenance
Доступ: admin, manager
Приклад відповіді: 
{
  "pendingMaintenance": 3,
  "completedMaintenance": 7
}
 
UML діаграма діяльності для серверної частини
Опис:
UML діаграма діяльності відображає основні процеси обробки запитів у серверній частині програмної системи. Вона показує послідовність кроків від отримання запиту клієнта до повернення відповіді.
Ключові етапи діяльності:
1.	Отримання запиту від клієнта.
2.	Перевірка авторизації користувача.
3.	Перевірка ролі користувача для доступу до функцій.
4.	Виконання бізнес-логіки:
o	Обробка сенсорних даних транспортних засобів.
o	Автоматизація технічного обслуговування (ТО).
5.	Формування відповіді:
o	Повернення результатів клієнту або повідомлення про помилку.

 
Призначення діаграми:
Ця діаграма допомагає зрозуміти загальний потік даних і логіку обробки запитів у системі.

UML діаграма взаємодії для серверної частини
Опис:
UML діаграма взаємодії ілюструє, як різні компоненти серверної частини взаємодіють між собою при виконанні запитів. Вона демонструє, як клієнтські запити проходять через маршрути, контролери та обробляються базою даних.
Ключові компоненти взаємодії:
1.	Клієнт (Thunder Client/Frontend) надсилає запит до сервера.
2.	Сервер приймає запит і передає його до відповідного контролера.
3.	Контролери:
o	vehicleController для роботи з транспортними засобами.
o	sensorController для обробки сенсорних даних.
o	userController для управління користувачами.
o	maintenanceController для технічного обслуговування.
o	analyticsController для збору аналітичної інформації.
4.	Middleware: перевіряє авторизацію користувача і його роль.
5.	База даних (SQLite): обробляє запити на збереження, оновлення та отримання даних.
6.	Сервер: формує відповідь і повертає її клієнту.
 
Призначення діаграми:
Ця діаграма показує, як компоненти взаємодіють між собою для забезпечення повного циклу обробки запитів, що важливо для підтримки модульної архітектури та масштабованості системи.




Висновки
Посилання на відео: https://youtu.be/OxUdCFshTxA
У ході виконання лабораторної роботи №3 були реалізовані бізнес-логіка та функції адміністрування серверної частини програмної системи для управління транспортними засобами.
Що було реалізовано:
1.	Бізнес-логіка:
o	Реалізовано моніторинг транспортних засобів із використанням сенсорних даних (рівень масла, температура двигуна).
o	Додано автоматизацію технічного обслуговування (автоматичне створення записів про необхідність ТО при перевищенні критичних порогів).
o	Створено аналітичні функції для зведеної інформації про транспортні засоби та технічне обслуговування.
2.	Функції адміністрування:
o	Реалізовано CRUD-функції для управління користувачами.
o	Додано рольову модель доступу (RBAC), що дозволяє обмежувати доступ до функцій залежно від ролі користувача (admin, manager, user).
3.	Перевірка роботи:
o	Всі маршрути API протестовані через Thunder Client.
o	Підтверджено коректність роботи бізнес-логіки та функцій адміністрування.
З якими труднощами зіткнувся:
1.	Проблема з дублюванням записів про ТО:
На початкових етапах виникали дублікати записів у таблиці maintenance_schedules. Це було вирішено шляхом додаткової перевірки перед створенням нових записів.
2.	Налаштування перевірки ролей:
Виникли складнощі з коректною передачею заголовків авторизації та перевіркою ролей користувачів. Після впровадження middleware для авторизації проблема була вирішена.
3.	Часова різниця у збереженні даних:
В процесі обробки сенсорних даних виникали розбіжності у часових мітках. Це було враховано при формуванні запитів до бази даних.

