МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ


ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмна інженерія»



ЗВІТ
до лабораторної работи №4 з дисципліни
«Аналіз та рефакторинг коду»




Виконав:	Перевірив:
ст. гр. ПЗПІ-22-9	Ст. викл. кафедри ПІ
Ковалевич Данііл Ігорович	Сокорчук Ігор Петрович

















Харків 2025
Мета роботи
Метою лабораторної роботи №4 є розробка програмного забезпечення для IoT-клієнта, що є частиною програмної системи для управління транспортними засобами. IoT-клієнт призначений для моніторингу параметрів транспортного засобу, таких як температура двигуна та рівень рідини, із використанням датчиків.
Основні завдання цієї роботи включають розробку бізнес-логіки та функцій налаштування IoT-клієнта, створення UML-діаграм для опису процесів і взаємодій, а також перевірку функціональності пристрою в середовищі симуляції Tinkercad.
Кінцевою метою є забезпечення автоматизованого моніторингу параметрів транспортного засобу з можливістю виведення попереджень про критичні стани для подальшої інтеграції з серверною частиною програмної системи.
Опис інженерних рішень
Вибір апаратної платформи: Arduino Uno R3
Для розробки IoT-клієнта було обрано Arduino Uno R3 – одну з найпоширеніших мікроконтролерних платформ для створення вбудованих систем. Її переваги включають легкість інтеграції з різними датчиками, широке ком'юніті підтримки та сумісність із середовищем симуляції Tinkercad, що дозволяє ефективно тестувати рішення без потреби фізичного обладнання.
Вибір датчиків:
1.	Датчик температури TMP36:
Для зчитування температури двигуна було використано аналоговий датчик TMP36. Його обрано через простоту підключення та високу точність вимірювання температури в діапазоні від -40°C до +125°C. Датчик підключено до аналогового входу A0.
2.	Фоторезистор (LDR) для симуляції рівня рідини:
Для симуляції рівня рідини використано фоторезистор (LDR), підключений до аналогового входу A1. Його було обрано як доступне рішення для моделювання зміни рівня рідини за допомогою варіації освітлення, що дозволяє перевірити реакцію системи на зміни умов.
Архітектура програмного забезпечення IoT-клієнта:
Програмне забезпечення складається з кількох ключових етапів:
1.	Зчитування даних з датчиків температури та рівня рідини.
2.	Аналіз критичних значень:
o	Якщо температура перевищує 100°C, система виводить попередження про перегрів.
o	Якщо рівень рідини падає нижче 20%, виводиться попередження про низький рівень рідини.
3.	Виведення даних через серійний монітор, що дозволяє користувачеві контролювати параметри в режимі реального часу.
4.	Циклічне виконання з затримкою в 2 секунди для оновлення показників.
Вибір середовища Tinkercad для симуляції:
Симуляція роботи IoT-клієнта була проведена у середовищі Tinkercad, яке забезпечує віртуальне середовище для тестування Arduino-проєктів. Це дозволило уникнути використання фізичних компонентів, що особливо корисно на етапі розробки прототипу.
Підходи до безпеки та масштабованості:
У перспективі IoT-клієнт буде інтегрований із серверною частиною програмної системи для зберігання даних і подальшого аналізу. Передбачено реалізацію безпечної передачі даних, що відповідає сучасним стандартам захисту інформації. Система легко масштабуватиметься за рахунок можливості додавання нових датчиків і функціональностей.

Розробка програмного забезпечення IoT-клієнта
Будова програмного забезпечення IoT-клієнта
Програмне забезпечення IoT-клієнта розроблено з урахуванням простоти інтеграції з апаратною частиною та гнучкості для майбутніх розширень. Основні компоненти програми:
1.	Ініціалізація пристроїв:
У функції setup() налаштовується серійний монітор для відображення даних.
2.	Зчитування даних із датчиків:
У функції loop() виконується зчитування аналогових значень із датчика температури TMP36 та фоторезистора LDR.
3.	Обробка та аналіз даних:
Зчитані значення перетворюються у зрозумілі користувачу одиниці (градуси Цельсія та відсотки рівня рідини).
4.	Виведення результатів:
Всі дані та попередження виводяться через серійний монітор для моніторингу в реальному часі.
5.	Циклічність:
Після обробки даних програма робить паузу 2 секунди, після чого процес повторюється.
Бізнес-логіка та функції налаштування IoT-клієнта
Бізнес-логіка IoT-клієнта полягає в моніторингу параметрів транспортного засобу та своєчасному інформуванні користувача про критичні стани.
1.	Зчитування температури двигуна:
Значення з датчика TMP36 конвертуються в градуси Цельсія за формулою:
T(°C) = (Vout - 0.5) × 100
де Vout – напруга, зчитана з датчика.
2.	Зчитування рівня рідини:
Аналогове значення з фоторезистора масштабується до відсоткового значення рівня рідини:
Рівень рідини (%) = map(analogValue, 0, 1023, 100, 0)
3.	Перевірка критичних значень:
o	Якщо температура перевищує 100°C, виводиться попередження про перегрів.
o	Якщо рівень рідини нижчий 20%, система сигналізує про низький рівень.
4.	Функції налаштування:
Параметри критичних значень температури та рівня рідини можуть бути змінені у змінних:
5.	const float criticalTemp = 100.0;
6.	const float criticalLiquidLevel = 20.0;
Програмна реалізація (Tinkercad)
Симуляція IoT-клієнта виконана у середовищі Tinkercad із використанням Arduino Uno R3. Після завантаження коду на віртуальну плату, проводилось тестування зчитування показників і перевірка спрацювання попереджень у разі зміни значень датчиків.
Основні результати симуляції:
•	Коректне зчитування температури в діапазоні від 20°C до 120°C.
•	Адекватне реагування на зміну рівня освітленості фоторезистора, що симулює зміну рівня рідини.
•	Своєчасне виведення попереджень при досягненні критичних меж.

Діаграми
UML діаграма прецедентів
Діаграма прецедентів відображає взаємодію користувача та системи з IoT-клієнтом.
 
 
UML діаграма діяльності
Діаграма діяльності описує процес роботи IoT-клієнта від зчитування даних до виведення попереджень.
 


Перевірка роботи IoT-клієнта
Для перевірки функціональності IoT-клієнта було проведено симуляцію в середовищі Tinkercad, де віртуально підключено датчик температури TMP36 та фоторезистор LDR. Результати роботи виводились на серійний монітор, що дозволило відстежувати зміну параметрів у режимі реального часу.
Принцип роботи системи:
1.	Зчитування температури двигуна:
IoT-клієнт зчитує аналогове значення з датчика температури TMP36, конвертує його у градуси Цельсія та відображає результат на серійному моніторі. Якщо температура перевищує критичне значення 100°C, система автоматично генерує попередження.
Приклад роботи:
o	Нормальна температура: 
o	Temperature: 75.0 °C
o	Temperature is normal.
o	Перегрів двигуна (критичне значення): 
o	Temperature: 105.0 °C
o	ALERT: High engine temperature detected!
2.	Зчитування рівня рідини:
Аналогове значення, отримане з фоторезистора LDR, масштабується до відсоткового рівня рідини. Якщо рівень падає нижче 20%, система виводить відповідне попередження про критично низький рівень рідини.
Приклад роботи:
o	Нормальний рівень рідини: 
o	Liquid Level: 45 %
o	Liquid level is normal.
o	Низький рівень рідини (критичне значення): 
o	Liquid Level: 15 %
o	ALERT: Low liquid level detected!
 
3.	Циклічне оновлення даних:
Після кожного зчитування та аналізу параметрів дані оновлюються з інтервалом у 2 секунди. Це дозволяє безперервно відстежувати стан транспортного засобу в реальному часі.
Візуальна демонстрація:

 
Рисунок 1 – Результати роботи IoT-клієнта у серійному моніторі
 
Рисунок 2 – Схема підключення IoT-клієнта на базі Arduino Uno R3
 
Висновки
У ході виконання лабораторної роботи №4 було розроблено IoT-клієнт для моніторингу параметрів транспортного засобу. Було обрано платформу Arduino Uno R3 та датчики TMP36 і LDR для зчитування температури двигуна та рівня рідини відповідно.
Система успішно виконує:
•	Зчитування даних з датчиків у реальному часі.
•	Аналіз критичних значень параметрів.
•	Виведення попереджень про перегрів або низький рівень рідини через серійний монітор.
Розроблений IoT-клієнт є частиною програмної системи для управління транспортними засобами та може бути інтегрований із серверною частиною для зберігання і подальшого аналізу даних. Рішення відповідає вимогам масштабованості та безпеки, а також може бути розширене для моніторингу додаткових параметрів.

